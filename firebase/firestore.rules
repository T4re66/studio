
rules_version = '2';
service cloud.firestore {
  match /databases/{db}/documents {

    function isAuthed() { 
      return request.auth != null; 
    }
    function userId() { 
      return request.auth.uid; 
    }
    function hasOrg(orgId) { 
      return request.auth.token.orgId == orgId; 
    }
    function hasRole(orgId, role) {
      return hasOrg(orgId) && request.auth.token.role == role;
    }
    function isSelf(orgId, uid) {
      return hasOrg(orgId) && userId() == uid;
    }
    function getOrgId() {
        return get(/databases/$(db)/documents/users/$(userId())).data.orgId;
    }

    match /orgs/{orgId} {
      allow read: if isAuthed() && hasOrg(orgId);
      allow write: if isAuthed() && hasRole(orgId, 'owner');

      match /users/{uid} {
        // Jeder darf Profile im eigenen org lesen.
        allow read: if isAuthed() && hasOrg(orgId);
        // Nutzer duerfen nur eigene, sichere Felder updaten.
        allow update: if isSelf(orgId, uid) &&
          request.resource.data.diff(resource.data).unchangedKeys().hasAll(['email', 'role', 'isActive', 'createdAt', 'lastLoginAt', 'orgId']) &&
          request.resource.data.diff(resource.data).changedKeys().hasOnly(['displayName','photoURL','dnd','presenceHint','birthday','notificationTokens', 'termsAcceptedAt', 'privacyAcceptedAt']);
        // Admin/Owner volle Rechte.
        allow create, delete: if isAuthed() && (hasRole(orgId,'admin') || hasRole(orgId,'owner'));
         // Admins can update more fields than regular users
        allow update: if isAuthed() && (hasRole(orgId,'admin') || hasRole(orgId,'owner'));
      }

      match /roles/{roleId} {
        allow read: if isAuthed() && hasOrg(orgId);
        allow write: if isAuthed() && hasRole(orgId,'owner');
      }

      match /invites/{inviteId} {
        allow create, update, delete: if isAuthed() && (hasRole(orgId,'admin') || hasRole(orgId,'owner'));
        allow read: if isAuthed() && hasOrg(orgId);
      }
    }

    // Audits nur schreibbar per Functions und lesbar f√ºr spezielle Staff-Rolle (Beispiel).
    match /audits/{id} {
      allow read: if isAuthed() && (request.auth.token.isStaff == true);
      allow write: if false;
    }
  }
}
